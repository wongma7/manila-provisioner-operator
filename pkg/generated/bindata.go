// Code generated by go-bindata.
// sources:
// assets/clusterrole.yaml
// assets/clusterrolebinding.yaml
// assets/deployment.yaml
// assets/serviceaccount.yaml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x6b\xc4\x30\x0c\x85\xf7\xfc\x0a\x91\xf9\x2e\xa5\x5b\xc9\xda\xa1\x7b\x87\x2e\xa5\x83\xce\x79\xdc\x89\x73\x6c\x23\xc9\x29\xf4\xd7\x97\xa4\x86\x0e\x77\x94\x40\x27\x19\xf9\xf1\x3e\x9e\xde\x55\xd2\x34\xd2\x73\xac\xe6\xd0\xd7\x1c\xd1\x71\x91\x37\xa8\x49\x4e\x23\xe9\x89\xc3\xc0\xd5\x2f\x59\xe5\x8b\x5d\x72\x1a\xae\x4f\x36\x48\x7e\x58\x1e\xbb\x19\xce\x13\x3b\x8f\x1d\x51\xe2\x19\x23\xcd\x9c\x24\xf2\xb1\x68\x5e\x64\x35\x80\x1e\xb5\xa6\x04\xed\xb4\x46\xd8\x2a\x3c\x12\x17\x79\xd1\x5c\x8b\x8d\xf4\xde\xf7\x1f\x1d\x11\x91\xc2\x72\xd5\x80\x6d\x67\x08\x0a\xb7\xf6\xb5\x40\x4f\xdb\x3a\x28\xd8\xd1\x1f\xa8\x3f\xc3\xd7\x31\x21\xc2\xb1\xc9\x76\xb8\x96\x35\x93\x39\x92\x2f\x39\xd6\x19\x37\xfe\xcd\x35\x8a\x6d\xf3\x93\x3d\x5c\xd6\xc7\x2f\xf7\x7f\xc0\x10\x59\xe6\xdd\xd4\x5a\x26\xbe\xcf\x32\xcf\xca\x67\xb4\x22\xee\x1e\xf0\x47\x11\x22\x9b\xed\xcc\xb9\x33\x13\x16\xa4\xdb\x66\xfe\x38\x59\x8b\x71\xa0\xbe\x34\xce\x77\x00\x00\x00\xff\xff\xd9\x2f\x2b\xad\x71\x02\x00\x00")

func assetsClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterroleYaml,
		"assets/clusterrole.yaml",
	)
}

func assetsClusterroleYaml() (*asset, error) {
	bytes, err := assetsClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\x31\x4e\xc5\x30\x0c\x80\xe1\x3d\xa7\xf0\x05\x5a\xc4\x86\xb2\x01\x03\xfb\x43\x62\x77\x13\x17\x4c\x53\x3b\x72\x9c\x0e\x9c\x1e\x45\x95\x58\xd0\xeb\x6c\xeb\xb3\xff\x8d\x25\x47\x78\x2d\xbd\x39\xd9\x4d\x0b\xbd\xb0\x64\x96\xcf\x80\x95\x3f\xc8\x1a\xab\x44\xb0\x05\xd3\x8c\xdd\xbf\xd4\xf8\x07\x9d\x55\xe6\xed\xa9\xcd\xac\x0f\xc7\x63\xd8\xc9\x31\xa3\x63\x0c\x00\x82\x3b\x45\xd8\x51\xb8\xe0\x54\x4d\x0f\x1e\x00\xd9\x64\x5a\x28\xb4\xbe\x7c\x53\xf2\x36\x36\x27\x38\x2f\xbf\x93\x1d\x9c\xe8\x39\x25\xed\xe2\x01\xe0\x3e\xf2\x37\x6c\x15\x13\x45\xc8\xb4\x62\x2f\x1e\x86\x7d\xa3\x75\xa8\xff\x6a\x2e\x7f\xea\x72\xaa\x58\xf9\xcd\xb4\xd7\x8b\xd0\xf0\x1b\x00\x00\xff\xff\xf8\x20\x60\xe7\x28\x01\x00\x00")

func assetsClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterrolebindingYaml,
		"assets/clusterrolebinding.yaml",
	)
}

func assetsClusterrolebindingYaml() (*asset, error) {
	bytes, err := assetsClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4f\x4b\x03\x31\x10\xc5\xef\xf9\x14\x8f\xde\xd7\xa5\x37\x09\x78\x10\xbc\x08\x22\x7b\xf2\x22\x1e\xc6\xec\x58\xc3\x4e\xfe\x90\xcc\x2e\xf4\xdb\x4b\x5a\x2d\x5b\x6a\x3b\xa7\x1c\xde\xef\x97\x79\x09\x65\xff\xc6\xa5\xfa\x14\x2d\x28\xe7\xda\x2f\x5b\x33\xf9\x38\x5a\x3c\x71\x96\xb4\x0f\x1c\xd5\x04\x56\x1a\x49\xc9\x1a\x20\x52\x60\x8b\x40\xd1\x0b\x75\xb9\xa4\xc5\x37\x98\x8b\x01\x84\x3e\x59\x6a\x0b\xa1\xb9\xfe\x4d\xd5\xcc\xae\x25\x0a\x67\xf1\x8e\xaa\xc5\xd6\x00\x95\x85\x9d\xa6\x72\x64\x03\xa9\xfb\x7e\x59\xc9\xae\xeb\x00\xe5\x90\x85\x94\x7f\xd1\xd5\xa6\x6d\xe4\xcc\x72\xcb\x03\xfc\xad\x76\x38\x73\x59\xbc\xe3\x47\xe7\xd2\x1c\xf5\x2a\x02\xb8\x14\x95\x7c\xe4\x72\xba\xa4\xbb\xf5\x44\xc7\xf1\x81\x76\x6c\x31\x26\x37\x71\xb9\xf3\xa9\x9f\xee\xab\x93\x34\x8f\x87\xf0\xc8\xa5\xbf\x84\x6d\x2b\x59\xf5\xdc\x31\xcc\x22\x43\x12\xef\xf6\x16\xcf\x5f\xaf\x49\x87\xc2\xb5\xfd\xd8\xa9\x6f\xd9\x55\x8b\x77\x6c\xba\xb5\xeb\xe1\x52\xbf\xc1\x87\xf9\x09\x00\x00\xff\xff\x80\xe2\xfe\x37\x0c\x02\x00\x00")

func assetsDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDeploymentYaml,
		"assets/deployment.yaml",
	)
}

func assetsDeploymentYaml() (*asset, error) {
	bytes, err := assetsDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xcb\xb1\x0d\x84\x30\x0c\x05\xd0\xde\x53\x78\x81\x2b\xae\x75\xc7\x0c\x48\xf4\x5f\x89\x8b\x2f\x88\x13\x99\x90\xf9\x11\x03\x3c\x0c\x1e\x9e\x37\x7b\x98\xae\xbf\x9c\x8c\x6a\xba\x7b\x2e\x16\xdf\x4a\xe9\x4f\x4c\x69\x3e\x51\x31\x61\xa2\x1a\x68\x6e\xda\x10\xbc\xf0\x1b\xd9\x17\x3f\xeb\x29\x6f\x00\x00\x00\xff\xff\x05\xe2\x35\x12\x49\x00\x00\x00")

func assetsServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsServiceaccountYaml,
		"assets/serviceaccount.yaml",
	)
}

func assetsServiceaccountYaml() (*asset, error) {
	bytes, err := assetsServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/clusterrole.yaml": assetsClusterroleYaml,
	"assets/clusterrolebinding.yaml": assetsClusterrolebindingYaml,
	"assets/deployment.yaml": assetsDeploymentYaml,
	"assets/serviceaccount.yaml": assetsServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"clusterrole.yaml": &bintree{assetsClusterroleYaml, map[string]*bintree{}},
		"clusterrolebinding.yaml": &bintree{assetsClusterrolebindingYaml, map[string]*bintree{}},
		"deployment.yaml": &bintree{assetsDeploymentYaml, map[string]*bintree{}},
		"serviceaccount.yaml": &bintree{assetsServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

